CREATE TABLE IF NOT EXISTS mpa
(
    id          INTEGER PRIMARY KEY,
    name        VARCHAR(50) NOT NULL,
    description VARCHAR(100)
);

CREATE TABLE IF NOT EXISTS genres
(
    id   INTEGER PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS directors
(
    id   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS films
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(100) NOT NULL,
    description VARCHAR,
    releaseDate DATE,
    duration    INTEGER,
    mpa         INTEGER REFERENCES mpa (id)
);

CREATE TABLE IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(100) NOT NULL,
    login    VARCHAR(100) NOT NULL,
    name     VARCHAR(100),
    birthday DATE
);

CREATE TABLE IF NOT EXISTS reviews
(
    id          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content     VARCHAR NOT NULL,
    is_positive BOOLEAN NOT NULL,
    id_user     INTEGER REFERENCES users (id) ON DELETE CASCADE,
    id_film     INTEGER REFERENCES films (id) ON DELETE CASCADE,
    useful      INTEGER
);

CREATE TABLE IF NOT EXISTS feed
(
    id_event   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_entity  INTEGER,
    id_user    INTEGER REFERENCES users (id) ON DELETE CASCADE,
    timestamp  BIGINT,
    event_type VARCHAR,
    operation  VARCHAR
);

CREATE TABLE IF NOT EXISTS film_directors
(
    film_id     INTEGER REFERENCES films (id) ON DELETE CASCADE,
    director_id INTEGER REFERENCES directors (id),
    PRIMARY KEY (film_id, director_id)
);

CREATE TABLE IF NOT EXISTS film_genres
(
    id_film  INTEGER REFERENCES films (id) ON DELETE CASCADE,
    id_genre INTEGER REFERENCES genres (id),
    PRIMARY KEY (id_film, id_genre)
);

CREATE TABLE IF NOT EXISTS likes_by_users
(
    id_film INTEGER REFERENCES films (id) ON DELETE CASCADE,
    id_user INTEGER REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (id_film, id_user)
);

CREATE TABLE IF NOT EXISTS friends
(
    id_user   INTEGER REFERENCES users (id) ON DELETE CASCADE,
    id_friend INTEGER REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (id_user, id_friend)
);

